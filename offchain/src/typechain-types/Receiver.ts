/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type Any2EVMMessageStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    sender: BytesLike;
    data: BytesLike;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    messageId: string,
    sourceChainSelector: bigint,
    sender: string,
    data: string,
    destTokenAmounts: Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: bigint;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export interface ReceiverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "allowlistSender"
      | "allowlistSourceChain"
      | "ccipReceive"
      | "processMessage"
      | "retryFailedMessage"
      | "setSimRevert"
      | "transferOwnership"
      | "allowlistedSenders"
      | "allowlistedSourceChains"
      | "getFailedMessagesIds"
      | "getRouter"
      | "owner"
      | "s_messageContents"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MessageFailed"
      | "MessageRecovered"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistSender",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistSourceChain",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ccipReceive",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "processMessage",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "retryFailedMessage",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSimRevert",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedSenders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedSourceChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFailedMessagesIds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_messageContents",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistSourceChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryFailedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSimRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedSourceChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFailedMessagesIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_messageContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace MessageFailedEvent {
  export type InputTuple = [messageId: BytesLike, reason: BytesLike];
  export type OutputTuple = [messageId: string, reason: string];
  export interface OutputObject {
    messageId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageRecoveredEvent {
  export type InputTuple = [messageId: BytesLike];
  export type OutputTuple = [messageId: string];
  export interface OutputObject {
    messageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Receiver extends BaseContract {
  connect(runner?: ContractRunner | null): Receiver;
  waitForDeployment(): Promise<this>;

  interface: ReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  allowlistSender: TypedContractMethod<
    [_sender: AddressLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  allowlistSourceChain: TypedContractMethod<
    [_sourceChainSelector: BigNumberish, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  ccipReceive: TypedContractMethod<
    [any2EvmMessage: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;

  processMessage: TypedContractMethod<
    [any2EvmMessage: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;

  retryFailedMessage: TypedContractMethod<
    [messageId: BytesLike, tokenReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setSimRevert: TypedContractMethod<[simRevert: boolean], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  allowlistedSenders: TypedContractMethod<
    [sender: AddressLike],
    [boolean],
    "view"
  >;

  allowlistedSourceChains: TypedContractMethod<
    [chainSelecotor: BigNumberish],
    [boolean],
    "view"
  >;

  getFailedMessagesIds: TypedContractMethod<[], [string[]], "view">;

  getRouter: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  s_messageContents: TypedContractMethod<
    [messageId: BytesLike],
    [
      [string, bigint, string, string] & {
        messageId: string;
        sourceChainSelector: bigint;
        sender: string;
        data: string;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowlistSender"
  ): TypedContractMethod<
    [_sender: AddressLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowlistSourceChain"
  ): TypedContractMethod<
    [_sourceChainSelector: BigNumberish, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ccipReceive"
  ): TypedContractMethod<
    [any2EvmMessage: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processMessage"
  ): TypedContractMethod<
    [any2EvmMessage: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retryFailedMessage"
  ): TypedContractMethod<
    [messageId: BytesLike, tokenReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSimRevert"
  ): TypedContractMethod<[simRevert: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowlistedSenders"
  ): TypedContractMethod<[sender: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "allowlistedSourceChains"
  ): TypedContractMethod<[chainSelecotor: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getFailedMessagesIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_messageContents"
  ): TypedContractMethod<
    [messageId: BytesLike],
    [
      [string, bigint, string, string] & {
        messageId: string;
        sourceChainSelector: bigint;
        sender: string;
        data: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "MessageFailed"
  ): TypedContractEvent<
    MessageFailedEvent.InputTuple,
    MessageFailedEvent.OutputTuple,
    MessageFailedEvent.OutputObject
  >;
  getEvent(
    key: "MessageRecovered"
  ): TypedContractEvent<
    MessageRecoveredEvent.InputTuple,
    MessageRecoveredEvent.OutputTuple,
    MessageRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "MessageFailed(bytes32,bytes)": TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;
    MessageFailed: TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;

    "MessageRecovered(bytes32)": TypedContractEvent<
      MessageRecoveredEvent.InputTuple,
      MessageRecoveredEvent.OutputTuple,
      MessageRecoveredEvent.OutputObject
    >;
    MessageRecovered: TypedContractEvent<
      MessageRecoveredEvent.InputTuple,
      MessageRecoveredEvent.OutputTuple,
      MessageRecoveredEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
